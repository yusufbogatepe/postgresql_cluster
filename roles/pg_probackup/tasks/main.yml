---

- block:  # Debian pgdg repo
    - name: Make sure the gnupg and apt-transport-https packages are present
      apt:
        pkg:
          - gnupg
          - apt-transport-https
        state: present

    - name: Make sure pgdg apt key is installed
      apt_key:
        id: 636D717E
        url: https://repo.postgrespro.ru/pg_probackup/keys/GPG-KEY-PG_PROBACKUP

    - name: Make sure pgdg repository is installed
      apt_repository:
        repo: "deb [arch=amd64] http://repo.postgrespro.ru/pg_probackup/deb/ {{ ansible_distribution_release }} main-{{ ansible_distribution_release }}"

    - name: Update apt cache
      apt:
        update_cache: true
  environment: "{{ proxy_env | default({}) }}"
  when:
    - installation_method == "repo"
    - ansible_os_family == "Debian"
    - pg_probackup_install_from_postgrespro_repo|bool
  tags: pg_probackup, pg_probackup_repo, pg_probackup_install

- block:  # RedHat pgdg repo
    - name: Get pg_probackup-repo-rhel.noarch.rpm
      get_url:
        url: "https://repo.postgrespro.ru/pg_probackup/keys/pg_probackup-repo-rhel.noarch.rpm"
        dest: /tmp/
        timeout: 30
        validate_certs: false

    - name: Make sure pgdg repository is installed
      package:
        name: /tmp/pg_probackup-repo-rhel.noarch.rpm
        state: present

    - name: Clean yum cache
      command: yum clean all
      when: ansible_distribution_major_version == '7'

    - name: Clean dnf cache
      command: dnf clean all
      when: ansible_distribution_major_version is version('8', '>=')
  environment: "{{ proxy_env | default({}) }}"
  when:
    - installation_method == "repo"
    - ansible_os_family == "RedHat"
    - pg_probackup_install_from_postgrespro_repo|bool
  tags: pg_probackup, pg_probackup_repo, pg_probackup_install

- name: Install pg_probackup
  package:
    name:
      - pg-probackup-{{ pg_probackup_version }}
      - pg-probackup-{{ pg_probackup_version }}-dbg
    state: present
  environment: "{{ proxy_env | default({}) }}"
  when:
    - installation_method == "repo"
    - ansible_os_family == "Debian"
  tags: pg_probackup, pg_probackup_install

- name: Install pg_probackup
  package:
    name:
      - pg_probackup-{{ pg_probackup_version }}
      - pg_probackup-{{ pg_probackup_version }}-debuginfo
    state: present
  environment: "{{ proxy_env | default({}) }}"
  when:
    - installation_method == "repo"
    - ansible_os_family == "RedHat"
  tags: pg_probackup, pg_probackup_install

...
