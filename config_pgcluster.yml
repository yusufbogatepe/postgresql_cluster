---

- name: Configuration PostgreSQL HA Cluster (based on "Patroni" and "{{ dcs_type }}")
  hosts: localhost
  gather_facts: false
  vars_files:
    - vars/main.yml
  vars:
    minimal_ansible_version: 2.7.0
  tasks:
    - name: Checking ansible version
      fail:
        msg: "Ansible version must be {{ minimal_ansible_version }} or higher"
      when: ansible_version.full is version(minimal_ansible_version, '<')

- name: Gathering facts from all servers
  hosts: all
  gather_facts: true
  tags: always

- hosts: postgres_cluster
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true
  vars_files:
    - vars/main.yml
    - vars/system.yml

  pre_tasks:
    - name: Include OS-specific variables
      include_vars: "vars/{{ ansible_os_family }}.yml"
      when: not ansible_os_family == 'Rocky' and not ansible_os_family == 'AlmaLinux'
      tags: always

    # For compatibility with Ansible old versions
    # (support for RockyLinux and AlmaLinux has been added to Ansible 2.11)
    - name: Include OS-specific variables
      include_vars: "vars/RedHat.yml"
      when: ansible_os_family == 'Rocky' or ansible_os_family == 'AlmaLinux'
      tags: always

    - name: Checking Linux distribution
      fail:
        msg: "{{ ansible_distribution }} is not supported"
      when: ansible_distribution not in os_valid_distributions

    - name: Checking version of OS Linux
      fail:
        msg: "{{ ansible_distribution_version }} of {{ ansible_distribution }} is not supported"
      when: ansible_distribution_version is version_compare(os_minimum_versions[ansible_distribution], '<')

    - name: Update apt cache
      apt:
        update_cache: true
        cache_valid_time: 3600
      environment: "{{ proxy_env | default({}) }}"
      when: ansible_os_family == "Debian" and installation_method == "repo"
      tags: add_repo, install_packages, install_postgres

    - name: Make sure the gnupg and apt-transport-https packages are present
      apt:
        pkg:
          - gnupg
          - apt-transport-https
        state: present
      environment: "{{ proxy_env | default({}) }}"
      when: ansible_os_family == "Debian" and installation_method == "repo"
      tags: add_repo, install_packages, install_postgres

    - name: Build a firewall_ports_dynamic_var
      set_fact:
        firewall_ports_dynamic_var: "{{ firewall_ports_dynamic_var | default([]) + (firewall_allowed_tcp_ports_for[item]) }}"
      loop: "{{ hostvars[inventory_hostname].group_names }}"
      when: firewall_enabled_at_boot|bool
      tags: config_firewall, firewall

    - name: Build a firewall_rules_dynamic_var
      set_fact:
        firewall_rules_dynamic_var: "{{ firewall_rules_dynamic_var | default([]) + (firewall_additional_rules_for[item]) }}"
      loop: "{{ hostvars[inventory_hostname].group_names }}"
      when: firewall_enabled_at_boot|bool
      tags: firewall

  roles:
    - role: ansible-role-firewall
      environment: "{{ proxy_env | default({}) }}"
      vars:
        firewall_allowed_tcp_ports: "{{ firewall_ports_dynamic_var | unique }}"
        firewall_additional_rules: "{{ firewall_rules_dynamic_var | unique }}"
      when: firewall_enabled_at_boot|bool
      tags: firewall

    - role: hostname
    - role: resolv_conf
    - role: etc_hosts
    - role: add-repository
    - role: packages
    - role: sudo
    - role: swap
    - role: sysctl
    - role: pam_limits
    - role: locales
    - role: timezone
    - role: ntp
    - role: ssh-keys

- import_playbook: balancers.yml
  when: with_haproxy_load_balancing|bool
  tags: config_balancers,load_balancing, haproxy

- hosts: postgres_cluster
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true
  handlers:
    - include: roles/patroni/handlers/main.yml
    - include: roles/pgbouncer/handlers/main.yml
  vars_files:
    - vars/main.yml
    - vars/system.yml

  pre_tasks:
    - name: Include OS-specific variables
      include_vars: "vars/{{ ansible_os_family }}.yml"
      when: not ansible_os_family == 'Rocky' and not ansible_os_family == 'AlmaLinux'
      tags: always

    # For compatibility with Ansible old versions
    # (support for RockyLinux and AlmaLinux has been added to Ansible 2.11)
    - name: Include OS-specific variables
      include_vars: "vars/RedHat.yml"
      when: ansible_os_family == 'Rocky' or ansible_os_family == 'AlmaLinux'
      tags: always

  roles:
    - role: patroni/config

    - role: vip-manager
      when: not with_haproxy_load_balancing|bool and
            (cluster_vip is defined and cluster_vip | length > 0)

    # optional
    - role: postgresql-users
      when: is_master == "true" and postgresql_users | length > 0

    - role: postgresql-databases
      when: is_master == "true" and postgresql_databases | length > 0

    - role: postgresql-schemas
      when: is_master == "true" and postgresql_schemas | length > 0

    - role: postgresql-extensions
      when: is_master == "true" and postgresql_extensions | length > 0

    - role: pgbouncer/config
      when: pgbouncer_install|bool and pgbouncer_generate_userlist|bool

...
